package business.project.noodles.service;

import business.project.noodles.entity.Invoice;
import business.project.noodles.entity.Orders;
import business.project.noodles.repository.InvoiceRepository;
import business.project.noodles.repository.OrdersRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentService {

    private final SimpMessagingTemplate messagingTemplate;
    private final OrdersRepository orderRepository;
    private final InvoiceRepository invoiceRepository;

    /**
     * X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o thanh to√°n th√†nh c√¥ng t·ª´ Sepay webhook
     *
     * @param orderId ID c·ªßa order
     * @param amount S·ªë ti·ªÅn ƒë√£ thanh to√°n
     * @param transactionId ID giao d·ªãch t·ª´ ng√¢n h√†ng
     * @return true n·∫øu x·ª≠ l√Ω th√†nh c√¥ng
     */
    @Transactional
    public boolean processPaymentSuccess(String orderId, Double amount, String transactionId) {
        try {
            log.info("üí≥ Processing payment for order: {}, amount: {}, transaction: {}",
                    orderId, amount, transactionId);

            // 1. T√¨m order trong database
            Optional<Orders> orderOpt = orderRepository.findById(Long.parseLong(orderId));

            if (orderOpt.isEmpty()) {
                log.error("‚ùå Order not found: {}", orderId);
                notifyPaymentError(orderId, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
                return false;
            }

            Orders order = orderOpt.get();

            // 2. Validate s·ªë ti·ªÅn
            if (!validateAmount(order, amount)) {
                log.error("‚ùå Amount mismatch for order {}: expected {}, got {}",
                        orderId, order.getTotal_amount(), amount);
                notifyPaymentError(orderId, "S·ªë ti·ªÅn kh√¥ng kh·ªõp");
                return false;
            }

            // 3. Ki·ªÉm tra tr·∫°ng th√°i order
            if ("COMPLETED".equals(order.getOrder_status())) {
                log.warn("‚ö†Ô∏è Order {} already completed", orderId);
                // V·∫´n notify th√†nh c√¥ng ƒë·ªÉ ƒë√≥ng m√†n h√¨nh payment
                notifyPaymentSuccess(orderId);
                return true;
            }

            if ("CANCELLED".equals(order.getOrder_status())) {
                log.error("‚ùå Order {} is cancelled", orderId);
                notifyPaymentError(orderId, "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
                return false;
            }

            // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i order
            order.setOrder_status(Orders.OrderStatus.COMPLETED);
            // TODO: L∆∞u th√¥ng tin transaction n·∫øu c√≥ tr∆∞·ªùng trong entity
            // order.setTransactionId(transactionId);
            // order.setPaymentMethod("BANK_TRANSFER");
            // order.setPaymentTime(Instant.now());

            orderRepository.save(order);
            log.info("‚úÖ Order {} status updated to COMPLETED", orderId);

            // 5. C·∫≠p nh·∫≠t Invoice payment_status th√†nh PAID
            updateInvoicePaymentStatus(Long.parseLong(orderId), transactionId);

            // 6. Notify qua WebSocket
            notifyPaymentSuccess(orderId);

            // 7. TODO: C√°c x·ª≠ l√Ω b·ªï sung
            // - G·ª≠i email/SMS th√¥ng b√°o
            // - C·∫≠p nh·∫≠t b√†n v·ªÅ tr·∫°ng th√°i available
            // - Log v√†o b·∫£ng payment_history
            return true;

        } catch (Exception e) {
            log.error("‚ùå Error processing payment for order {}: {}", orderId, e.getMessage(), e);
            notifyPaymentError(orderId, "L·ªói x·ª≠ l√Ω thanh to√°n");
            return false;
        }
    }

    /**
     * Validate s·ªë ti·ªÅn thanh to√°n
     */
    private boolean validateAmount(Orders order, Double paidAmount) {
        // Ki·ªÉm tra null ho·∫∑c s·ªë √¢m
        if (paidAmount == null || paidAmount <= 0) {
            log.warn("‚ö†Ô∏è Invalid paid amount: {}", paidAmount);
            return false;
        }

        if (order.getTotal_amount() <= 0) {
            log.warn("‚ö†Ô∏è Invalid order amount: {}", order.getTotal_amount());
            return false;
        }

        // Cho ph√©p sai l·ªách 1000ƒë do l√†m tr√≤n
        double difference = Math.abs(order.getTotal_amount() - paidAmount);
        boolean isValid = difference < 1000;

        log.info("üí∞ Amount validation - Order: {}, Paid: {}, Difference: {}, Valid: {}",
                order.getTotal_amount(), paidAmount, difference, isValid);

        return isValid;
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n c·ªßa Invoice
     */
    @Transactional
    public void updateInvoicePaymentStatus(Long orderId, String transactionId) {
        try {
            log.info("üìÑ Updating invoice payment status for order: {}", orderId);

            Optional<Invoice> invoiceOpt = invoiceRepository.findByIdOrder(orderId);

            if (invoiceOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è Invoice not found for order: {}", orderId);
                return;
            }

            Invoice invoice = invoiceOpt.get();

            // C·∫≠p nh·∫≠t payment status
            invoice.setPayment_status(Invoice.PaymentStatus.PAID);
            invoice.setPayment_method(Invoice.PaymentMethod.BANKING);
            // invoice.setTransactionId(transactionId); // N·∫øu c√≥ field n√†y

            invoiceRepository.save(invoice);
            log.info("‚úÖ Invoice payment status updated to PAID for order: {}", orderId);

        } catch (Exception e) {
            log.error("‚ùå Error updating invoice payment status for order {}: {}",
                    orderId, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng qua WebSocket
     */
    public void notifyPaymentSuccess(String orderId) {
        log.info("üîî Notifying payment success for order: {}", orderId);

        try {
            messagingTemplate.convertAndSend(
                    "/topic/payment." + orderId,
                    Map.of(
                            "status", "PAID",
                            "order_id", orderId,
                            "message", "Thanh to√°n th√†nh c√¥ng",
                            "timestamp", Instant.now().toString()
                    )
            );
            log.info("‚úÖ Payment notification sent successfully for order: {}", orderId);
        } catch (Exception e) {
            log.error("‚ùå Failed to send payment notification for order {}: {}",
                    orderId, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o l·ªói thanh to√°n qua WebSocket
     */
    public void notifyPaymentError(String orderId, String errorMessage) {
        log.warn("‚ö†Ô∏è Notifying payment error for order {}: {}", orderId, errorMessage);

        try {
            messagingTemplate.convertAndSend(
                    "/topic/payment." + orderId,
                    Map.of(
                            "status", "ERROR",
                            "order_id", orderId,
                            "message", errorMessage,
                            "timestamp", Instant.now().toString()
                    )
            );
        } catch (Exception e) {
            log.error("‚ùå Failed to send error notification for order {}: {}",
                    orderId, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω thanh to√°n
     */
    public void notifyPaymentProcessing(String orderId) {
        log.info("‚è≥ Notifying payment processing for order: {}", orderId);

        try {
            messagingTemplate.convertAndSend(
                    "/topic/payment." + orderId,
                    Map.of(
                            "status", "PROCESSING",
                            "order_id", orderId,
                            "message", "ƒêang x·ª≠ l√Ω thanh to√°n...",
                            "timestamp", Instant.now().toString()
                    )
            );
        } catch (Exception e) {
            log.error("‚ùå Failed to send processing notification for order {}: {}",
                    orderId, e.getMessage(), e);
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n c·ªßa order
     */
    public Map<String, Object> checkPaymentStatus(Long orderId) {
        try {
            Optional<Orders> orderOpt = orderRepository.findById(orderId);

            if (orderOpt.isEmpty()) {
                return Map.of(
                        "success", false,
                        "message", "Order not found"
                );
            }

            Orders order = orderOpt.get();
            boolean isPaid = "COMPLETED".equals(order.getOrder_status());

            return Map.of(
                    "success", true,
                    "order_id", orderId,
                    "status", order.getOrder_status(),
                    "is_paid", isPaid,
                    "total_amount", order.getTotal_amount()
            );

        } catch (Exception e) {
            log.error("‚ùå Error checking payment status for order {}: {}",
                    orderId, e.getMessage(), e);
            return Map.of(
                    "success", false,
                    "message", "Error checking payment status"
            );
        }
    }

    /**
     * H·ªßy giao d·ªãch thanh to√°n (n·∫øu c·∫ßn)
     */
    @Transactional
    public boolean cancelPayment(Long orderId, String reason) {
        try {
            log.info("üö´ Cancelling payment for order: {}, reason: {}", orderId, reason);

            Optional<Orders> orderOpt = orderRepository.findById(orderId);

            if (orderOpt.isEmpty()) {
                log.error("‚ùå Order not found: {}", orderId);
                return false;
            }

            Orders order = orderOpt.get();

            // Ch·ªâ cho ph√©p h·ªßy n·∫øu ch∆∞a ho√†n th√†nh
            if ("COMPLETED".equals(order.getOrder_status())) {
                log.warn("‚ö†Ô∏è Cannot cancel completed order: {}", orderId);
                return false;
            }

            order.setOrder_status(Orders.OrderStatus.CANCELLED);
            // TODO: L∆∞u l√Ω do h·ªßy n·∫øu c√≥ tr∆∞·ªùng
            // order.setCancelReason(reason);

            orderRepository.save(order);
            log.info("‚úÖ Payment cancelled for order: {}", orderId);

            // Notify qua WebSocket
            notifyPaymentError(orderId.toString(), "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy: " + reason);

            return true;

        } catch (Exception e) {
            log.error("‚ùå Error cancelling payment for order {}: {}",
                    orderId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * L·∫•y th·ªëng k√™ thanh to√°n theo ng√†y
     */
    public Map<String, Object> getPaymentStatistics(Instant startDate, Instant endDate) {
        try {
            // TODO: Implement statistics query
            // - T·ªïng s·ªë giao d·ªãch th√†nh c√¥ng
            // - T·ªïng doanh thu
            // - S·ªë giao d·ªãch th·∫•t b·∫°i
            // - Ph∆∞∆°ng th·ª©c thanh to√°n ph·ªï bi·∫øn

            return Map.of(
                    "success", true,
                    "start_date", startDate.toString(),
                    "end_date", endDate.toString(),
                    "message", "Statistics feature coming soon"
            );

        } catch (Exception e) {
            log.error("‚ùå Error getting payment statistics: {}", e.getMessage(), e);
            return Map.of(
                    "success", false,
                    "message", "Error getting statistics"
            );
        }
    }
}
